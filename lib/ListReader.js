// Generated by CoffeeScript 1.7.1
(function() {
  (function(dependencies, factory) {
    if (typeof define === 'function' && define.amd) {
      return define(dependencies, factory);
    } else {
      return module.exports = factory.apply(null, dependencies.map(require));
    }
  })(['fs', 'split', 'when'], function(fs, split, When) {
    var ListReader;
    ListReader = (function() {
      function ListReader(path, options) {
        var _base, _base1;
        this.path = path;
        this.options = options;
        if (this.options == null) {
          this.options = {};
        }
        if ((_base = this.options).encoding == null) {
          _base.encoding = 'utf8';
        }
        if ((_base1 = this.options).dropFirstByte == null) {
          _base1.dropFirstByte = true;
        }
      }

      ListReader.prototype.readList = function(path, callback) {
        var promise;
        if (typeof path === 'function') {
          callback = path;
          path = null;
        }
        if (path == null) {
          path = this.path;
        }
        if (path == null) {
          throw new Error("No path set");
        }
        promise = When.promise((function(_this) {
          return function(resolve, reject) {
            var err, firstByte, result, stream;
            result = new Array();
            firstByte = _this.options.dropFirstByte;
            try {
              stream = fs.createReadStream(path, {
                encoding: _this.options.encoding
              });
            } catch (_error) {
              err = _error;
              reject(err);
            }
            return stream.pipe(split()).on('error', reject).on('data', function(line) {
              if (firstByte) {
                line = line.slice(1);
                firstByte = false;
              }
              return result.push(line);
            }).on('end', function() {
              return resolve(result);
            });
          };
        })(this));
        if (callback) {
          return promise["catch"](callback).done(function(result) {
            return callback(null, result);
          });
        } else {
          return promise;
        }
      };

      return ListReader;

    })();
    return ListReader;
  });

}).call(this);
